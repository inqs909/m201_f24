{
  "hash": "27a935bbbb08782bd5ca7bfeba4def79",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Inference\"\nformat:\n  revealjs:\n    scrollable: true\n    theme: [default, styles.scss]\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false\n    code-fold: true\n    chalkboard:\n      src: notes/chalkboard_1a.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: false\n    eval: true\n    message: false\n    warnings: false\n    comment: \"#>\" \n    error: true\n    \nrevealjs-plugins:\n  - pointer\n  - verticator\n  \nwebr: \n  show-startup-message: true\n  packages: ['tidyr', 'ggplot2', 'palmerpenguins', 'openintro']\n  \nfilters: \n  - reveal-header\n  - reveal-auto-agenda\n  - webr\n  \nauto-agenda:\n  bullets: numbered\n  heading: Learning Outcomes\n  \neditor: visual\n---\n\n\n\n\n\n\n# Inference\n\n```{webr-r}\n#| context: setup\nshuffle <- function(x){\n  n <- length(x)\n  return(sample(x, n))\n}\npenguins <- penguins |> drop_na() |> \n  mutate(body_mass_kg = body_mass_g / 1000)\n```\n\n## Motivating Example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](14a_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## Adding a Box Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](14a_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n## Linear Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- penguins %>% lm(body_mass_kg ~ species, data = .)\nres\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = body_mass_kg ~ species, data = .)\n#> \n#> Coefficients:\n#>      (Intercept)  speciesChinstrap     speciesGentoo  \n#>          3.70616           0.02692           1.38627\n```\n\n\n:::\n:::\n\n\n## Are the Means from each species different? Or is it due to random chance?\n\n## Inference\n\nThe process to determine if an estimate of a parameter is valuable or just due to random chance.\n\n## Randomness of Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% gf_jitter(shuffle(body_mass_kg) ~ species) %>%\n  gf_theme(theme_bw()) %>%\n  gf_labs(x = \"Quarter Mile Time\", y = \"MPG\") %>%\n  gf_theme(axis.title = element_text(size = 24))\n```\n\n::: {.cell-output-display}\n![](14a_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n## Empirical vs Shuffled\n\n```{webr-r}\nshuffle <- function(x){n <- length(x); return(sample(x, n))}\npenguins |> ggplot(aes(x = species, y = body_mass_g)) +\n  theme_bw() +labs(x = \"Species\", y = \"Body Mass\") + theme(axis.text = element_text(size = 18)) +\n  geom_jitter()\n```\n\n## Obtaining F\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 1.247653\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 2.973099\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.6777638\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.5489494\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.5276875\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 2.758505\n```\n\n\n:::\n:::\n\n\n## Obtaining PRE\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.001641251\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.03680501\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.002159657\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.001049988\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.008002626\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.008278263\n```\n\n\n:::\n:::\n\n\n## Repeat it 1000\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf_sim <- do(1000) * f(shuffle(mpg) ~ qsec, \n                         data = mtcars)\npre_sim <- do(1000) * pre(shuffle(mpg) ~ qsec, \n                         data = mtcars)\n```\n:::\n\n\n## Distribution of PRE\n\nThe distribution of $PRE$ shows all the possible values that $PRE$ can take with their respective probabilities.\n\n## Distribution of PRE\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~pre, data = pre_sim)\n```\n\n::: {.cell-output-display}\n![](14a_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n## Distribution of $F$\n\nThe distribution of $F$ shows all the possible values that $F$ can take with their respective probabilities.\n\n## Distribution of $F$\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~f, data = f_sim)\n```\n\n::: {.cell-output-display}\n![](14a_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n## Portioning the upper 5% the Distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~f, data = f_sim, fill = ~upper(f, .05))\n```\n\n::: {.cell-output-display}\n![](14a_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## Where is our observed value?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~f, data = f_sim, fill = ~upper(f, .05)) %>%\n  gf_vline(xintercept = f(res))\n```\n\n::: {.cell-output-display}\n![](14a_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n# P-Value\n\n## P-Value\n\nThe p-value tells you what is the probability of observing your $F$ or something more extreme.\n\n## Visually\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~f, data = f_sim, fill = ~ f > f(res)) %>%\n  gf_vline(xintercept = f(res))\n```\n\n::: {.cell-output-display}\n![](14a_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n## Computing the p-value\n\nWe will count how many simulated $F$'s are more extreme and divided by the number of simulations plus one.\n\n## Counting how many F's are more extreme\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntally(~ f > f(res), data = f_sim)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> f > f(res)\n#>  TRUE FALSE \n#>     0  1000\n```\n\n\n:::\n:::\n\n\n## Computing the p-value\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n#> TRUE \n#>    0\n```\n\n\n:::\n:::\n\n\n# Compute Mathematically\n\n## Mathematical Model\n\n$$\nTS = \\frac{MSG}{MSE} \\sim F(k-1,n-k-1)\n$$\n\n## P-Value\n\n$$\n\\mathrm{p} = Pr(TS \\ge F)\n$$\n\n## Let's have R do it!\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  Analysis of Variance Table (Type III SS)\n#>  Model: body_mass_kg ~ species\n#> \n#>                               SS  df     MS       F   PRE     p\n#>  ----- --------------- | ------- --- ------ ------- ----- -----\n#>  Model (error reduced) | 145.190   2 72.595 341.895 .6745 .0000\n#>  Error (from model)    |  70.069 330  0.212                    \n#>  ----- --------------- | ------- --- ------ ------- ----- -----\n#>  Total (empty model)   | 215.260 332  0.648\n```\n\n\n:::\n:::\n\n\n## Mathematical compared to Increasing Simulated Number\n\n$$\nP= 0.000\n$$\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"Sim: 1000\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> TRUE \n#>    0\n```\n\n\n:::\n:::\n\n\n## Mathematical compared to Increasing Simulated Number\n\n$$\nP= 0.000\n$$\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"Sim: 1000\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> TRUE \n#>    0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"Sim: 10000\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> TRUE \n#>    0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"Sim: 100000\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> TRUE \n#>    0\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}