{
  "hash": "19cf1185e09f5800f0d3ccc6dfc66d57",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Confidence Intervals\"\nformat:\n  revealjs:\n    scrollable: true\n    theme: [default, styles.scss]\n    navigation-mode: vertical\n    controls-layout: bottom-right\n    controls-tutorial: true\n    incremental: false\n    code-fold: true\n    chalkboard:\n      src: notes/chalkboard_1a.json\n      storage: chalkboard_pres\n      theme: whiteboard\n      chalk-width: 4\nknitr:\n  opts_chunk: \n    echo: false\n    eval: true\n    message: false\n    warnings: false\n    comment: \"#>\" \n    error: true\n    \nrevealjs-plugins:\n  - pointer\n  - verticator\n\nfilters: \n  - reveal-header\n  - reveal-auto-agenda\n  - webr\n  \nauto-agenda:\n  bullets: numbered\n  heading: Learning Outcomes\n  \neditor: visual\n---\n\n\n\n\n\n\n# Inference\n\n## Motivating Example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15a_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## Linear Model\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> Call:\n#> lm(formula = weight ~ mage, data = births14)\n#> \n#> Coefficients:\n#> (Intercept)         mage  \n#>      6.7930       0.0142\n```\n\n\n:::\n:::\n\n\n## Randomization Test\n\nWhat are we asking when we shuffle the data?\n\n## $\\beta_1=0$ vs $\\beta_1 \\ne 0$\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15a_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## Conclusion\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntally(~ abs(b1) > abs(b1(res)), b1_sim_1000)[1] / 1001\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  TRUE \n#> 0.037\n```\n\n\n:::\n:::\n\n\n## What about different values of $\\beta$?\n\n## What if $\\beta_1=0.01$?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15a_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n## What if $\\beta_1 = 0.001$?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15a_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## What if $\\beta_1 = 0.02$?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15a_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n## What if $\\beta_1 = 0.03$?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15a_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n# Confidence Intervals\n\n## Confidence Intervals\n\nThese are a collection of $\\beta_1$ values that will fail to reject the Null Hypothesis.\n\n::: fragment\nThe $\\beta_1$ values that are not different from our current estimate $b_1$\n:::\n\n## Confidence Intervals\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15a_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n## Confidence Intervals\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15a_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## How to construct the DGP centered around $b_1$?\n\n::: fragment\nBootstrapping Techniques\n:::\n\n::: fragment\nMathematical Models\n:::\n\n# Bootstrapping Techniques\n\n## Bootstrapping Techniques\n\nBootstrapping is a technique to determine which $\\beta_1$ values, or any other statistic, will **not** be significantly different than $b_1$.\n\n::: fragment\nBootstrapping will simulate several fake data sets from the DGP of the data. Afterwards, each data set will produce a statistic to construct the sampling distribution.\n:::\n\n## Bootstrap Theory\n\n::: fragment\nThe data set was generated from a distribution called $f$.\n:::\n\n::: fragment\n$f$ is unknown, we will sample from $\\hat f$ generated from the data.\n:::\n\n::: fragment\nWhen $n \\rightarrow \\infty$, then $\\hat f\\rightarrow f$\n:::\n\n::: fragment\nSo long as $n$ is sufficiently large, the DGP of a statistic will be generated.\n:::\n\n## Bootstrapping Algorithm\n\n1.  Resample the data set using the `resample()` function\n2.  Fit a linear model using the resampled data and `lm()` function\n3.  Store the estimates from the linear model\n4.  Repeat steps 1-3, until you a high number of simulations\n5.  Compute the confidence interval or standard errors from the bootstrap estimates\n\n## Bootstrapping in R\n\nThe `resample()` will create a new data set by sampling the old data set with replacement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboot1 <- lm(weight ~ mage, data = resample(births14))\nb1(boot1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.0218\n```\n\n\n:::\n:::\n\n\nUse the `do()` function to repeat this process a high number of times.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboot_samples <- do(1000) * b1(lm(weight ~ mage, \n                              data = resample(births14)))\nboot_samples %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>        b1\n#> 1 0.02027\n#> 2 0.02403\n#> 3 0.01389\n#> 4 0.00732\n#> 5 0.01881\n#> 6 0.01301\n```\n\n\n:::\n:::\n\n\n## Bootstrap Distribution\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15a_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n## 95% Confidence Interval\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15a_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n## 95% Confidence Interval\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb1_boot_1000 %>% confint()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>   name    lower  upper level     method estimate\n#> 1   b1 0.000733 0.0284  0.95 percentile   0.0142\n```\n\n\n:::\n:::\n\n\n# Mathematical Models\n\n## Mathematical Model\n\n$$\nT= \\frac{b_1 - \\beta_1}{SE(b_1)} \\sim t(n-1)\n$$\n\n## Confidence Interval\n\n$$\n Pr(a<T<b) = 1- \\alpha\n$$\n\n-   $\\alpha = 0.05$\n\n## Confidence Interval\n\n$$\nPr\\left(t_{a/2,n-1} < \\frac{b_1-\\beta_1}{SE(b_1)} < t_{1-a/2,n-1}\\right) = 1 - \\alpha\n$$\n\n## Computing Interval\n\n$$\nb_1 - t_{a/2,n-1} SE(b_1) < \\beta_1 < b_1 + t_{a/2,n-1} SE(b_1)\n$$\n\nOR\n\n$$\nb_1 \\pm t_{a/2,n-1} SE(b_1)\n$$\n\n## 95% Confidence Interval\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres %>% confint()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>                2.5 % 97.5 %\n#> (Intercept) 6.384711 7.2012\n#> mage        0.000177 0.0283\n```\n\n\n:::\n:::\n\n\n## Bootstrap vs Mathematical Models\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"Mathematical Model\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    2.5 %   97.5 % \n#> 0.000177 0.028308\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"Bootstrap: 1000\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>      lower  upper\n#> 1 0.000733 0.0284\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"Bootstrap: 10000\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>       lower  upper\n#> 1 -4.32e-06 0.0287\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"Bootstrap: 100000\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>       lower  upper\n#> 1 -0.000207 0.0286\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}